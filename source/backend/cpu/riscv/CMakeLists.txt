IF(NOT DEFINED ARCHS)
  set(ARCHS ${CMAKE_SYSTEM_PROCESSOR})
ENDIF()
FILE(GLOB MNN_riscv32_SRC ${CMAKE_CURRENT_LIST_DIR}/riscv32/*.[sS])
FILE(GLOB MNN_riscv64_SRC ${CMAKE_CURRENT_LIST_DIR}/riscv64/*.[sS])

FILE(GLOB MNN_NEON_SRC ${CMAKE_CURRENT_LIST_DIR}/CommonOptFunctionNeon.cpp)
if (MNN_SUPPORT_BF16)
    FILE(GLOB MNN_NEON_SRC ${MNN_NEON_SRC} ${CMAKE_CURRENT_LIST_DIR}/CommonNeonBF16.cpp)
    FILE(GLOB MNN_riscv32_SRC ${MNN_riscv32_SRC} ${CMAKE_CURRENT_LIST_DIR}/riscv32/bf16/*.[sS])
    FILE(GLOB MNN_riscv64_SRC ${MNN_riscv64_SRC} ${CMAKE_CURRENT_LIST_DIR}/riscv64/bf16/*.[sS])
endif()

if (MNN_LOW_MEMORY)
    FILE(GLOB MNN_riscv64_SRC ${MNN_riscv64_SRC} ${CMAKE_CURRENT_LIST_DIR}/riscv64/low_memory/*.[sS])
endif()

if(CMAKE_SYSTEM_PROCESSOR MATCHES "^riscvv7" OR ARCHS MATCHES "^riscvv7(;riscvv7s)?")
    message(STATUS "Enabling riscv32 Assemblies")
    add_library(MNNriscv32 OBJECT ${MNN_riscv32_SRC} ${MNN_NEON_SRC})
    target_include_directories(MNNriscv32 PRIVATE ${CMAKE_CURRENT_LIST_DIR}/)
    list(APPEND MNN_OBJECTS_TO_LINK $<TARGET_OBJECTS:MNNriscv32>)
    list(APPEND MNN_TARGETS MNNriscv32)
    add_definitions(-DMNN_USE_NEON)
    target_compile_options(MNNriscv32 PRIVATE -D__riscv__)
    if (MNN_SUPPORT_BF16)
        target_compile_options(MNNriscv32 PRIVATE -DMNN_SUPPORT_BF16)
    endif()
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^riscv64" OR ARCHS STREQUAL "riscv64")
    message(STATUS "Enabling riscv64 Assemblies")
    add_library(MNNriscv64 OBJECT ${MNN_riscv64_SRC} ${MNN_NEON_SRC})
    target_include_directories(MNNriscv64 PRIVATE ${CMAKE_CURRENT_LIST_DIR}/)
    list(APPEND MNN_OBJECTS_TO_LINK $<TARGET_OBJECTS:MNNriscv64>)
    list(APPEND MNN_TARGETS MNNriscv64)
    add_definitions(-DMNN_USE_NEON)
    target_compile_options(MNNriscv64 PRIVATE -D__riscv64__)
    if (MNN_SUPPORT_BF16)
        target_compile_options(MNNriscv64 PRIVATE -DMNN_SUPPORT_BF16)
    endif()

    if(MNN_riscv82)
        message(STATUS "Enable INT8 SDOT")
        target_compile_options(MNNriscv64 PRIVATE -DENABLE_riscvV82)
    endif()

else()
# Building fat binary requires multiple separate builds and lipo-by-hand under CMake's design
endif()
